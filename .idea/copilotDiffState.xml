<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/com/gabby/Main.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/gabby/Main.java" />
              <option name="originalContent" value="package com.gabby;&#10;&#10;import com.softlocked.orbit.core.ast.ASTNode;&#10;import com.softlocked.orbit.core.exception.ParsingException;&#10;import com.softlocked.orbit.interpreter.memory.GlobalContext;&#10;import com.softlocked.orbit.lexer.Lexer;&#10;import com.softlocked.orbit.parser.Parser;&#10;import org.luaj.vm2.Globals;&#10;import org.luaj.vm2.LuaValue;&#10;import org.luaj.vm2.lib.jse.JsePlatform;&#10;&#10;import java.util.List;&#10;&#10;public class Main {&#10;    private final static String code = &quot;&quot;&quot;&#10;    print(&quot;Starting!&quot;)&#10;    fun fibonacci(n) {&#10;        if (n &lt;= 1) {&#10;            return n;&#10;        }&#10;        return fibonacci(n - 1) + fibonacci(n - 2)&#10;    }&#10;    long start = time()&#10;    // Calculate fibonacci of 35&#10;    int result = fibonacci(35)&#10;    print(&quot;Fibonacci of 35 is &quot; + result)&#10;    long end = time()&#10;    print(&quot;Orbit Execution took &quot; + (end - start) + &quot; milliseconds&quot;)&#10;    &quot;&quot;&quot;;&#10;&#10;    public static void main(String[] args) throws ParsingException, InterruptedException {&#10;        System.out.println(&quot;\nRunning Orbit...\n&quot;);&#10;        List&lt;String&gt; tokens = new Lexer(code).tokenize();&#10;&#10;        GlobalContext context = new GlobalContext();&#10;&#10;        ASTNode ast = Parser.parse(tokens, context);&#10;&#10;        String luaCode = &quot;&quot;&quot;&#10;            local math = math&#10;                    local os = os&#10;            &#10;                    local A = 0.0&#10;                      &#10;        &quot;&quot;&quot;;&#10;&#10;        Globals globals = JsePlatform.standardGlobals();&#10;        LuaValue chunk = globals.load(luaCode);&#10;&#10;        for(int i = 0; i &lt; 1; i++) {&#10;            long startTime = System.currentTimeMillis();&#10;            //context = new GlobalContext();&#10;            ast.evaluate(context);&#10;            long endTime = System.currentTimeMillis();&#10;            System.out.println(&quot;Orbit Execution &quot; + (i + 1) + &quot; took &quot; + (endTime - startTime) + &quot; milliseconds&quot;);&#10;&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.gabby;&#10;&#10;import com.softlocked.orbit.core.ast.ASTNode;&#10;import com.softlocked.orbit.core.exception.ParsingException;&#10;import com.softlocked.orbit.interpreter.memory.GlobalContext;&#10;import com.softlocked.orbit.lexer.Lexer;&#10;import com.softlocked.orbit.parser.Parser;&#10;import org.luaj.vm2.Globals;&#10;import org.luaj.vm2.LuaValue;&#10;import org.luaj.vm2.lib.jse.JsePlatform;&#10;&#10;import java.util.List;&#10;&#10;public class Main {&#10;    private final static String code = &quot;&quot;&quot;&#10;    print(&quot;Starting!&quot;)&#10;    fun fibonacci(n) {&#10;        if (n &lt;= 1) {&#10;            return n;&#10;        }&#10;        return fibonacci(n - 1) + fibonacci(n - 2)&#10;    }&#10;    long start = time()&#10;    // Calculate fibonacci of 35&#10;    int result = fibonacci(35)&#10;    print(&quot;Fibonacci of 35 is &quot; + result)&#10;    long end = time()&#10;    print(&quot;Orbit Execution took &quot; + (end - start) + &quot; milliseconds&quot;)&#10;    &quot;&quot;&quot;;&#10;&#10;    public static void main(String[] args) throws ParsingException, InterruptedException {&#10;        System.out.println(&quot;\nRunning Orbit...\n&quot;);&#10;        List&lt;String&gt; tokens = new Lexer(code).tokenize();&#10;&#10;        GlobalContext context = new GlobalContext();&#10;&#10;        ASTNode ast = Parser.parse(tokens, context);&#10;&#10;        String luaCode = &quot;&quot;&quot;&#10;            local math = math&#10;                    local os = os&#10;            &#10;                    local A = 0.0&#10;                      &#10;        &quot;&quot;&quot;;&#10;&#10;        Globals globals = JsePlatform.standardGlobals();&#10;        LuaValue chunk = globals.load(luaCode);&#10;&#10;        for(int i = 0; i &lt; 1; i++) {&#10;            long startTime = System.currentTimeMillis();&#10;            //context = new GlobalContext();&#10;            ast.evaluate(context);&#10;            long endTime = System.currentTimeMillis();&#10;            System.out.println(&quot;Orbit Execution &quot; + (i + 1) + &quot; took &quot; + (endTime - startTime) + &quot; milliseconds&quot;);&#10;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>